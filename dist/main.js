(()=>{var e={144:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(15),i=n.n(r),a=n(645),o=n.n(a)()(i());o.push([e.id,".playerOneBoard,.playerTwoBoard{margin:0 auto}.grid-item{box-shadow:0 0 0 1px #000;margin:0 0 1px 1px;text-align:center;padding-top:100%}.hide{display:none}.ship{background:#6969fc;box-shadow:0 0 0 1px #000;margin:0 0 1px 1px;text-align:center}.hit{background:red;box-shadow:0 0 0 1px #000;margin:0 0 1px 1px;text-align:center}.miss{background:gray;box-shadow:0 0 0 1px #000;margin:0 0 1px 1px;text-align:center}.grid-container{display:grid;margin:0;padding:0 0 35px 0;grid-template-columns:repeat(10, 1fr);grid-template-rows:repeat(10, 1fr)}#rotate{margin-bottom:35px}.main{display:grid}@media only screen and (min-device-width: 320px)and (max-device-width: 480px){*{font-size:28px}.grid-container{width:85vw}#instructions{width:42.5vw}.horizontal{width:8.5vw;margin-right:10px}.horizontal#carrier{height:42.5vw}.horizontal#battleship{height:34vw}.horizontal#cruiser{height:25.5vw}.horizontal#submarine{height:25.5vw}.horizontal#destroyer{height:17vw}.vertical{height:8.5vw}.vertical#carrier{width:42.5vw}.vertical#battleship{width:34vw}.vertical#cruiser{width:25.5vw}.vertical#submarine{width:25.5vw}.vertical#destroyer{width:17vw}}@media only screen and (min-device-width: 481px)and (max-device-width: 768px){*{font-size:18px}.grid-container{width:50vw}#instructions{width:25vw}.horizontal{width:5vw;margin-right:5px}.horizontal#carrier{height:25vw}.horizontal#battleship{height:20vw}.horizontal#cruiser{height:15vw}.horizontal#submarine{height:15vw}.horizontal#destroyer{height:10vw}.vertical{height:5vw}.vertical#carrier{width:25vw}.vertical#battleship{width:20vw}.vertical#cruiser{width:15vw}.vertical#submarine{width:15vw}.vertical#destroyer{width:10vw}}@media only screen and (min-device-width: 769px){.main{grid-auto-flow:column}.grid-container{width:40vw;padding:20px}#instructions{width:20vw}.playerOneBoard,.playerTwoBoard{display:grid;grid-auto-flow:column}.horizontal{width:4vw;margin-right:5px}.horizontal#carrier{height:20vw}.horizontal#battleship{height:16vw}.horizontal#cruiser{height:12vw}.horizontal#submarine{height:12vw}.horizontal#destroyer{height:8vw}.vertical{height:4vw}.vertical#carrier{width:20vw}.vertical#battleship{width:16vw}.vertical#cruiser{width:12vw}.vertical#submarine{width:12vw}.vertical#destroyer{width:8vw}}","",{version:3,sources:["webpack://./src/styles/main.scss"],names:[],mappings:"AAEA,gCAEE,aAAA,CAGF,WACE,yBAAA,CACA,kBAAA,CACA,iBAAA,CACA,gBAAA,CAGF,MACE,YAAA,CAGF,MACE,kBAAA,CACA,yBAAA,CACA,kBAAA,CACA,iBAAA,CAGF,KACE,cAAA,CACA,yBAAA,CACA,kBAAA,CACA,iBAAA,CAGF,MACE,eAAA,CACA,yBAAA,CACA,kBAAA,CACA,iBAAA,CAGF,gBACE,YAAA,CACA,QAAA,CACA,kBAAA,CACA,qCAAA,CACA,kCAAA,CAGF,QACE,kBAAA,CAGF,MACE,YAAA,CAGF,8EAGE,EACE,cAAA,CAGF,gBACE,UAPM,CAUR,cACE,YAAA,CAGF,YACE,WAAA,CACA,iBAAA,CAEA,oBACE,aAAA,CAGF,uBACE,WAAA,CAGF,oBACE,aAAA,CAGF,sBACE,aAAA,CAGF,sBACE,WAAA,CAIJ,UACE,YAAA,CAEA,kBACE,YAAA,CAGF,qBACE,UAAA,CAGF,kBACE,YAAA,CAGF,oBACE,YAAA,CAGF,oBACE,UAAA,CAAA,CAKN,8EAEE,EACE,cAAA,CAGF,gBACE,UANM,CASR,cACE,UAAA,CAGF,YACE,SAAA,CACA,gBAAA,CAEA,oBACE,WAAA,CAGF,uBACE,WAAA,CAGF,oBACE,WAAA,CAGF,sBACE,WAAA,CAGF,sBACE,WAAA,CAIJ,UACE,UAAA,CAEA,kBACE,UAAA,CAGF,qBACE,UAAA,CAGF,kBACE,UAAA,CAGF,oBACE,UAAA,CAGF,oBACE,UAAA,CAAA,CAKN,iDAGE,MACE,qBAAA,CAGF,gBACE,UAPM,CAQN,YAAA,CAGF,cACE,UAAA,CAGF,gCAEE,YAAA,CACA,qBAAA,CAGF,YACE,SAAA,CACA,gBAAA,CAEA,oBACE,WAAA,CAGF,uBACE,WAAA,CAGF,oBACE,WAAA,CAGF,sBACE,WAAA,CAGF,sBACE,UAAA,CAIJ,UACE,UAAA,CAEA,kBACE,UAAA,CAGF,qBACE,UAAA,CAGF,kBACE,UAAA,CAGF,oBACE,UAAA,CAGF,oBACE,SAAA,CAAA",sourcesContent:['@use "sass:math";\n\n.playerOneBoard,\n.playerTwoBoard {\n  margin: 0 auto;\n}\n\n.grid-item {\n  box-shadow: 0 0 0 1px black;\n  margin: 0 0 1px 1px;\n  text-align: center;\n  padding-top: 100%;\n}\n\n.hide {\n  display: none;\n}\n\n.ship {\n  background: rgb(105, 105, 252);\n  box-shadow: 0 0 0 1px black;\n  margin: 0 0 1px 1px;\n  text-align: center;\n}\n\n.hit {\n  background: red;\n  box-shadow: 0 0 0 1px black;\n  margin: 0 0 1px 1px;\n  text-align: center;\n}\n\n.miss {\n  background: grey;\n  box-shadow: 0 0 0 1px black;\n  margin: 0 0 1px 1px;\n  text-align: center;\n}\n\n.grid-container {\n  display: grid;\n  margin: 0;\n  padding: 0 0 35px 0;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n#rotate {\n  margin-bottom: 35px;\n}\n\n.main {\n  display: grid;\n}\n\n@media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\n  $width: 85vw;\n\n  * {\n    font-size: 28px;\n  }\n\n  .grid-container {\n    width: $width;\n  }\n\n  #instructions {\n    width: math.div($width, 10) * 5;\n  }\n\n  .horizontal {\n    width: math.div($width, 10);\n    margin-right: 10px;\n\n    &#carrier {\n      height: math.div($width, 10) * 5;\n    }\n\n    &#battleship {\n      height: math.div($width, 10) * 4;\n    }\n\n    &#cruiser {\n      height: math.div($width, 10) * 3;\n    }\n\n    &#submarine {\n      height: math.div($width, 10) * 3;\n    }\n\n    &#destroyer {\n      height: math.div($width, 10) * 2;\n    }\n  }\n\n  .vertical {\n    height: math.div($width, 10);\n\n    &#carrier {\n      width: math.div($width, 10) * 5;\n    }\n\n    &#battleship {\n      width: math.div($width, 10) * 4;\n    }\n\n    &#cruiser {\n      width: math.div($width, 10) * 3;\n    }\n\n    &#submarine {\n      width: math.div($width, 10) * 3;\n    }\n\n    &#destroyer {\n      width: math.div($width, 10) * 2;\n    }\n  }\n}\n\n@media only screen and (min-device-width: 481px) and (max-device-width: 768px) {\n  $width: 50vw;\n  * {\n    font-size: 18px;\n  }\n\n  .grid-container {\n    width: $width;\n  }\n\n  #instructions {\n    width: math.div($width, 10) * 5;\n  }\n\n  .horizontal {\n    width: math.div($width, 10);\n    margin-right: 5px;\n\n    &#carrier {\n      height: math.div($width, 10) * 5;\n    }\n\n    &#battleship {\n      height: math.div($width, 10) * 4;\n    }\n\n    &#cruiser {\n      height: math.div($width, 10) * 3;\n    }\n\n    &#submarine {\n      height: math.div($width, 10) * 3;\n    }\n\n    &#destroyer {\n      height: math.div($width, 10) * 2;\n    }\n  }\n\n  .vertical {\n    height: math.div($width, 10);\n\n    &#carrier {\n      width: math.div($width, 10) * 5;\n    }\n\n    &#battleship {\n      width: math.div($width, 10) * 4;\n    }\n\n    &#cruiser {\n      width: math.div($width, 10) * 3;\n    }\n\n    &#submarine {\n      width: math.div($width, 10) * 3;\n    }\n\n    &#destroyer {\n      width: math.div($width, 10) * 2;\n    }\n  }\n}\n\n@media only screen and (min-device-width: 769px) {\n  $width: 40vw;\n\n  .main {\n    grid-auto-flow: column;\n  }\n\n  .grid-container {\n    width: $width;\n    padding: 20px;\n  }\n\n  #instructions {\n    width: math.div($width, 10) * 5;\n  }\n\n  .playerOneBoard,\n  .playerTwoBoard {\n    display: grid;\n    grid-auto-flow: column;\n  }\n\n  .horizontal {\n    width: math.div($width, 10);\n    margin-right: 5px;\n\n    &#carrier {\n      height: math.div($width, 10) * 5;\n    }\n\n    &#battleship {\n      height: math.div($width, 10) * 4;\n    }\n\n    &#cruiser {\n      height: math.div($width, 10) * 3;\n    }\n\n    &#submarine {\n      height: math.div($width, 10) * 3;\n    }\n\n    &#destroyer {\n      height: math.div($width, 10) * 2;\n    }\n  }\n\n  .vertical {\n    height: math.div($width, 10);\n\n    &#carrier {\n      width: math.div($width, 10) * 5;\n    }\n\n    &#battleship {\n      width: math.div($width, 10) * 4;\n    }\n\n    &#cruiser {\n      width: math.div($width, 10) * 3;\n    }\n\n    &#submarine {\n      width: math.div($width, 10) * 3;\n    }\n\n    &#destroyer {\n      width: math.div($width, 10) * 2;\n    }\n  }\n}\n'],sourceRoot:""}]);const d=o},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);r&&i[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,i=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,i,a=[],o=!0,d=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);o=!0);}catch(e){d=!0,i=e}finally{try{o||null==n.return||n.return()}finally{if(d)throw i}}return a}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],o=i[3];if("function"==typeof btoa){var d=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(d),c="/*# ".concat(s," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([c]).join("\n")}return[a].join("\n")}},379:(e,t,n)=>{"use strict";var r,i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function o(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function d(e,t){for(var n={},r=[],i=0;i<e.length;i++){var d=e[i],s=t.base?d[0]+t.base:d[0],c=n[s]||0,l="".concat(s," ").concat(c);n[s]=c+1;var h=o(l),A={css:d[1],media:d[2],sourceMap:d[3]};-1!==h?(a[h].references++,a[h].updater(A)):a.push({identifier:l,updater:m(A,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function h(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function A(e,t,n){var r=n.css,i=n.media,a=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var u=null,p=0;function m(e,t){var n,r,i;if(t.singleton){var a=p++;n=u||(u=s(t)),r=h.bind(null,n,a,!1),i=h.bind(null,n,a,!0)}else n=s(t),r=A.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=d(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=o(n[r]);a[i].references--}for(var s=d(e,t),c=0;c<n.length;c++){var l=o(n[c]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=s}}}},766:(e,t,n)=>{const r=n(643),i=n(887),a=(e,t,n,o,d,s=null,c=null,l=null)=>{let h=document.getElementById("content");h.innerHTML="";let A=document.createElement("div");A.className="main";let u,p,m=i(),g=[];g=null===c?[m.carrier,m.battleship,m.cruiser,m.submarine,m.destroyer]:c;const v=["carrier","battleship","cruiser","submarine","destroyer"],w=(i,s)=>{let c;if("horizontal"===x?c=e.deploy(r(`${s}`),`${i.substr(2)}`,"horizontal"):"vertical"===x&&(c=e.deploy(r(`${s}`),`${i.substr(2)}`,"vertical")),"Your deployment would go off the board"===c||"You cannot deploy on another ship."===c)return"Your deployment would go off the board"===c?C():"You cannot deploy on another ship."===c&&f(),void a(e,t,n,o,d,x,g,u);{let r=[];for(let e=0;e<g.length;e++)g[e].id===s||r.push(g[e]);a(e,t,n,o,d,x,r)}},C=()=>{alert("Your deployment would go off the board.")},f=()=>{alert("You cannot deploy on another ship.")};addEventListener("touchstart",(e=>{l&&(u=l),!u&&v.includes(e.target.id)?u=e.target.id:u&&!p&&e.target.id.match(/\d\-[A-Z]\d/)?(p=e.target.id,w(p,u)):u&&v.includes(e.target.id)&&(u=e.target.id)}));const b=e=>{e.dataTransfer.setData("text/plain",e.target.id),e.dataTransfer.effectAllowed="move","vertical"===x?e.dataTransfer.setDragImage(e.path[0],25,25):"horizontal"===x&&(e.path[0].src=`images/${e.path[0].id}Horizontal.png`,e.dataTransfer.setDragImage(e.path[0],25,25))};h.append(A);let y=document.createElement("div");y.innerHTML="Player",y.className="playerOneBoard",A.append(y);let E=document.createElement("div");E.addEventListener("drop",(e=>{e.preventDefault(),w(e.toElement.id,e.dataTransfer.getData("text/plain"))})),E.addEventListener("dragover",(e=>{e.preventDefault(),e.dataTransfer.dropEffect="move"})),E.id="zone1",E.className="grid-container",y.append(E);let x,B=document.createElement("div");B.id="shipyard",y.append(B),x=null===s||"vertical"===s?"vertical":"horizontal";let G=document.createElement("button");G.id="rotate",B.append(G);const $=document.createElement("div");$.id="shipsDiv",B.append($);const z=document.createElement("p");z.id="instructions",z.innerHTML="To play on mobile, touch the ship you want to deploy, then touch the location on the board.<br /><br />For desktop, click and drag the ship you want to deploy to the location on the board.",B.append(z),G.innerHTML="rotate";for(let e=0;e<g.length;e++)if("horizontal"===x){const t=document.createElement("br");$.append(t),$.append(g[e])}else $.append(g[e]);G.addEventListener("click",(function(){let e=document.getElementsByClassName("rotateMe");if("horizontal"===x){$.innerHTML="";for(let e=0;e<g.length;e++)$.append(g[e]);for(let t=0;t<e.length;t++)e[t].src=`images/${e[t].id}Vertical.png`,e[t].className="rotateMe horizontal";x="vertical"}else if("vertical"===x){$.innerHTML="";for(let e=0;e<g.length;e++){const t=document.createElement("br");$.append(g[e]),$.append(t)}for(let t=0;t<e.length;t++)e[t].src=`images/${e[t].id}Horizontal.png`,e[t].className="rotateMe vertical",e[t].addEventListener("dragstart",b);x="horizontal"}}));for(const[t,n]of Object.entries(e.board)){let e=document.createElement("div");e.id=`1-${t}`,e.className="grid-item","ship"===n?(e.innerHTML=" ",e.className="ship"):e.innerHTML="",E.append(e)}let F=document.createElement("div");F.innerHTML="Computer",F.className="playerTwoBoard",null!==c&&0===c.length&&(G.className="hide",z.className="hide",A.append(F));let k=document.createElement("ul");k.className="grid-container",F.appendChild(k);for(const[r,i]of Object.entries(t.board)){let a=document.createElement("div");a.id=`2-${r}`,a.className="grid-item","ship"===i?a.addEventListener("click",(function r(i){i.currentTarget.removeEventListener(i.type,r),a.innerHTML=" ",a.className="hit",n.attackEnemy(a.id.substr(2),t),"Game over!"!==e.gameOver(t.board,"Player 1")&&"Game over!"!==t.gameOver(e.board,"Computer player")||location.reload();let d=document.getElementById(`1-${o.attackEnemy(null,e)}`);" "===d.innerHTML?(d.className="hit","Game over!"!==e.gameOver(t.board,"Player 1")&&"Game over!"!==t.gameOver(e.board,"Computer player")||location.reload()):d.className="miss"})):a.addEventListener("click",(function r(i){i.currentTarget.removeEventListener(i.type,r),a.innerHTML="",a.className="miss",n.attackEnemy(a.id.substr(2),t);let d=document.getElementById(`1-${o.attackEnemy(null,e)}`);" "===d.innerHTML?(d.className="hit","Game over!"!==e.gameOver(t.board)&&"Game over!"!==t.gameOver(e.board)||location.reload()):d.className="miss"})),k.append(a)}const M=document.getElementById("carrier");null!==M&&M.addEventListener("dragstart",b);const N=document.getElementById("battleship");null!==N&&N.addEventListener("dragstart",b);const T=document.getElementById("cruiser");null!==T&&T.addEventListener("dragstart",b);const S=document.getElementById("submarine");null!==S&&S.addEventListener("dragstart",b);const I=document.getElementById("destroyer");return null!==I&&I.addEventListener("dragstart",b),{gameboard1:e}};e.exports=a},417:(e,t,n)=>{const r=n(507),i=n(498),a=n(643),o=n(766);e.exports=()=>{let e=i(),t=i(),n=[e.board,t.board],d=r(),s=r();return t.deploy(a("carrier"),"computer","computer"),t.deploy(a("battleship"),"computer","computer"),t.deploy(a("cruiser"),"computer","computer"),t.deploy(a("submarine"),"computer","computer"),t.deploy(a("destroyer"),"computer","computer"),o(e,t,d,s,!1),{boards:n,player1:d,player2:s,gameboard1:e,gameboard2:t}}},498:e=>{e.exports=()=>{let e=[],t={A1:"",B1:"",C1:"",D1:"",E1:"",F1:"",G1:"",H1:"",I1:"",J1:"",A2:"",B2:"",C2:"",D2:"",E2:"",F2:"",G2:"",H2:"",I2:"",J2:"",A3:"",B3:"",C3:"",D3:"",E3:"",F3:"",G3:"",H3:"",I3:"",J3:"",A4:"",B4:"",C4:"",D4:"",E4:"",F4:"",G4:"",H4:"",I4:"",J4:"",A5:"",B5:"",C5:"",D5:"",E5:"",F5:"",G5:"",H5:"",I5:"",J5:"",A6:"",B6:"",C6:"",D6:"",E6:"",F6:"",G6:"",H6:"",I6:"",J6:"",A7:"",B7:"",C7:"",D7:"",E7:"",F7:"",G7:"",H7:"",I7:"",J7:"",A8:"",B8:"",C8:"",D8:"",E8:"",F8:"",G8:"",H8:"",I8:"",J8:"",A9:"",B9:"",C9:"",D9:"",E9:"",F9:"",G9:"",H9:"",I9:"",J9:"",A10:"",B10:"",C10:"",D10:"",E10:"",F10:"",G10:"",H10:"",I10:"",J10:""},n=["vertical","horizontal"];const r=e=>{switch(e){case"offBoard":return"Your deployment would go off the board";case"onShip":return"You cannot deploy on another ship."}},i=(a,o,d)=>{let s=[];const c=r("offBoard"),l=r("onShip");if("computer"!==o||"computer"!==d){if("horizontal"===d){const e="J";if(a.shipSize.length-1+o.charCodeAt(0)>e.charCodeAt(0))return c;for(let e=0;e<a.shipSize.length;e++)if(0===e){if("ship"===t[o])return l;s.push(o),a.shipSize[e]=o}else{const n=o.charCodeAt(0)+e;let r=String.fromCharCode(n)+o.substr(1);if("ship"===t[r])return l;s.push(r),a.shipSize[e]=r}}else if("vertical"===d){if(a.shipSize.length-1+parseInt(o.substring(1))>10)return c;for(let e=0;e<a.shipSize.length;e++){let n=o.charAt(0)+(parseInt(o.charAt(1))+e);if(0===e){if("ship"===t[o])return l;s.push(o),a.shipSize[e]=o}else{if("ship"===t[n])return l;s.push(n),a.shipSize[e]=n}}}for(let e=0;e<s.length;e++)t[s[e]]="ship";return e.push(a),t}{let e=e=>{let t=Object.keys(e);return t[Math.floor(Math.random()*t.length)]},r=!1;for(;!1===r;){let o=n[Math.floor(Math.random()*n.length)],d=e(t),s=i(a,d,o);"Your deployment would go off the board"!==s&&"You cannot deploy on another ship."!==s&&(r=!0)}}};return{board:t,deploy:i,receiveAttack:(n,r=!1)=>{if("ship"!==t[n])return t[n]="miss",!0===r?n:"Miss!";for(let i=0;i<e.length;i++)for(let a=0;a<e[i].shipSize.length;a++)if(e[i].shipSize[a]===n){if("sunk"===e[i].hit(a)){for(let n=0;n<e[i].shipSize.length;n++)t[e[i].shipSize[n].split("hit-sunk")[0]]="sunk";let a=[];for(const[e,n]of Object.entries(t))a.push(n);return a.every((e=>"ship"!==e))||!0===r?n:"sunk"}return t[n]="hit",!0===r?n:"Hit!"}},fleet:e,gameOver:(e,t)=>{let n=[];for(const[t,r]of Object.entries(e))n.push(r);if(n.every((e=>"ship"!==e)))return alert(`${t} wins!`),"Game over!"}}}},507:e=>{e.exports=()=>({attackEnemy:(e,t)=>{if(null===e){let e=[];for(const[n,r]of Object.entries(t.board))"ship"!==r&&""!==r||e.push(n);const n=e[Math.floor(Math.random()*e.length)];return t.receiveAttack(n,!0)}return t.receiveAttack(e)}})},643:e=>{e.exports=e=>{let t;switch(e){case"carrier":t=5;break;case"battleship":t=4;break;case"cruiser":case"submarine":t=3;break;case"destroyer":t=2}const n=new Array(t),r=e;n.fill("");return{hit:e=>(n[e]=`${n[e]}hit`,n.every((e=>e.includes("hit")))?(()=>{for(let e=0;e<n.length;e++)n[e]+="-sunk";return"sunk"})():n),shipSize:n,name:r}}},887:e=>{e.exports=()=>{const e=document.createElement("img");e.src="images/carrierVertical.png",e.id="carrier",e.className="rotateMe horizontal",e.setAttribute("draggable","true");const t=document.createElement("img");t.src="images/battleshipVertical.png",t.id="battleship",t.className="rotateMe horizontal",t.setAttribute("draggable","true");const n=document.createElement("img");n.src="images/cruiserVertical.png",n.id="cruiser",n.className="rotateMe horizontal",n.setAttribute("draggable","true");const r=document.createElement("img");r.src="images/submarineVertical.png",r.id="submarine",r.className="rotateMe horizontal",r.setAttribute("draggable","true");const i=document.createElement("img");return i.src="images/destroyerVertical.png",i.id="destroyer",i.className="rotateMe horizontal",i.setAttribute("draggable","true"),{carrier:e,battleship:t,cruiser:n,submarine:r,destroyer:i}}}},t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(379),t=n.n(e),r=n(144);t()(r.Z,{insert:"head",singleton:!1}),r.Z.locals,n(417)()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,